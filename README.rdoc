== README

The following Challenge was use to practice behavior driven development in rails.

-----------------------------------------------------------------------------------------------------------------------------------------
Rails Car Challenge
For HTML elements see: http://www.w3schools.com/html/html_form_input_types.asp
Major hint: Use session to store Car object between requests and views.

Story: As an internet user, I can visit a page that shows Welcome to the Car Simulator
Hint: Use the Rails generator to create a system with noun welcome and verb create_car.

Story: As an internet user, when I visit the welcome page, I am asked for make and model year of the car to be simulated.

Story: As an internet user, when I visit the welcome page, after entering make and model year, and clicking on a button labelled Simulate Car I am taken to a status page showing make and model year of the car.
Hint: Generate new controller with noun simulator and verb do.

Story: As an internet user, when I visit the status page for a selected car, it shows whether the lights on the car is on or off. They start off.
Hint: Create a Car class in the models folder with the information from the welcome page and a lights accessor (and underlying instance variable). In the welcome controller, create a car object and store it in the session before redirecting to the simulator.

Story: As an internet user, when I visit the status page, I can turn the lights on using a button that toggles between show On and Off.
Hint: Implement turnLightsOn and turnLightsOff methods on the car class. Get the car object from the session and call the respective method before rendering the do page.

Story: As an internet user, when I visit the car status page, I can see the cars current speed. It starts a zero.

Story: As an internet user, when I visit the car status page, I can click on an accelerate button, which makes the car go faster, and which is shown in the car status page. 
Hint: Create a route get name/acccelerate. Then in the GameController create a method called accelerate.

def accelerate 
  @car = YAML.load(session[:car])
  @car.accelerate
  session[:car] = @car.to_yaml
  render "play"
end
Story: As an internet user, when I visit the car status page, I can click on an brake button, which makes the car go slower, and shows that in the car status page.

Story: As an internet user, I can set and release the parking brake using radio buttons.

Story: As an internet user, when the parking brake is set, the accelerate button does not work.

Story: As an internet user, I can enter a description of the on the welcome page, and it is shown on the status page (max 100 characters.)
Hint: Use input of type text area

Story: As an internet user, I can select a color on the welcome page and have it used as the color for the model and year on the status page. 
Hint: Use input of type color

This README would normally document whatever steps are necessary to get the
application up and running.

-----------------------------------------------------------------------------------------------------------------------------------------
Rails auto readme template:

Things you may want to cover:

* Ruby version: 2.2.1p85

* Rails version: 4.2.5.1

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.
